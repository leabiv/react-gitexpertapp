{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropType","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wPAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAiB5C,OACI,0BAAMC,SAVU,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAMd,2BACIO,KAAO,OACPC,MAAST,EACTU,SAlBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,YAuB/BZ,EAAYe,UAAY,CACpBd,c,OAAee,EAASC,KAAKC,Y,2BC/BlBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATrB,kBAadM,GAbc,4CAAH,sDCCTO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,yBAAKc,UAAY,2CACb,yBAAKC,IAAOf,EAAKgB,IAAON,IACxB,2BAAIA,KCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAa,IAAD,EAEZlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAU,CACNf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDdwBK,CAAc1B,GAAjCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAEpB,OACE,oCACE,4BAAKpB,GAEJoB,GAAW,sCAEZ,yBAAKJ,UAAY,aAGLH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAOjB,EAAIC,IACPD,UEhBnBkB,EAAe,WAAO,IAAD,EAEM9C,mBAAS,CAAC,cAFhB,mBAEvB+C,EAFuB,KAEXhD,EAFW,KAI9B,OACI,6BACI,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEQgD,EAAWpB,KAAI,SAAAT,GACf,OAAO,kBAAC,EAAD,CACHA,SAAYA,EACZ2B,IAAO3B,UCd/B8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a862c42d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropType from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n   \r\n   const [inputValue, setinputValue] = useState('');\r\n\r\n   const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n   }\r\n\r\n   const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setinputValue('');\r\n        }\r\n   }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input\r\n                type = \"text\"\r\n                value = {inputValue}\r\n                onChange = {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropType.func.isRequired\r\n}","\r\n  export const getGifs = async( category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=ycu9kNuSFEpS3Koli1bhwR5wMxBGlKNV`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n    return (\r\n        <div className = \"cards animate__animated animate__bounce\">\r\n            <img src = {url} alt = {title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n import { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n    return (\r\n      <>\r\n        <h3>{category}</h3>\r\n\r\n        {loading && <p>Loading</p> }\r\n                 \r\n        <div className = \"card-grid\">\r\n            \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key = {img.id}\r\n                            {...img}/>\r\n                    ))\r\n                }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading :true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState ({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GitExpertApp = () => {\r\n   \r\n    const [categories, setCategories] = useState(['Samurai X']);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GitExpertApp</h2>            \r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                    return <GifGrid \r\n                        category = {category}\r\n                        key = {category}\r\n                        />\r\n                    })\r\n                }\r\n            </ol>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GitExpertApp } from './GitExpertApp';\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}